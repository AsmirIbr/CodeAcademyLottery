openapi: 3.0.1
info:
  title: Code Academy Lottery
  description: This is a sample Lottery server produced my Asmir Ibrovic.
  termsOfService: 'http://swagger.io/terms/'
  contact:
    email: asmir.ibrovic@hotmail.com
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
  version: 1.0.0
externalDocs:
  description: Find out more about Swagger
  url: 'http://swagger.io'
servers:
  - url: 'https://localhost:3000'
  - url: 'https://localhost:3000'
tags:
  - name: Lottery
    description: Everything about my Lottery
    externalDocs:
      description: Find out more
      url: 'https://github.com/AsmirIbr'
paths:
  /codes:
    get:
      tags:
        - Codes
      summary: List all Codes
      operationId: listAllCodes
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Codes'
        '400':
          description: Bed request
          content: {}
    post:
      tags:
        - Codes
      summary: Add a new code to the lottery
      operationId: addCode
      requestBody:
        description: Code object that needs to be added to the lottery
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Codes'
        required: true
      responses:
        '201':
          description: successful operation
          content: {}
        '405':
          description: Invalid input
          content: {}
  '/code/{code}':
    get:
      tags:
        - Codes
      summary: Find Code by code
      operationId: findCodeByCode
      parameters:
        - name: code
          in: path
          description: Find Code by code
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content: {}
        '404':
          description: Code not found
          content: {}
  '/codes/{status}':
    get:
      tags:
        - Codes
      summary: Find Code by status
      operationId: findByStatus
      parameters:
        - name: status
          in: path
          description: Find Code by status
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Codes'
        '405':
          description: Invalid input
          content: {}
  '/codeid/{id}':
    get:
      tags:
        - Codes
      summary: Find code by ID
      operationId: getCodeById
      parameters:
        - name: id
          in: path
          description: Find code by id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Codes'
        '400':
          description: Invalid ID supplied
          content: {}
        '404':
          description: Code not found
          content: {}
    put:
      tags:
        - Codes
      summary: Update an existing code
      operationId: updateCode
      parameters:
        - name: id
          in: path
          description: Code Id that need to be updated
          required: true
          schema:
            type: integer
      requestBody:
        description: Updated code object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Codes'
        required: false
      responses:
        '204':
          description: Code has been updated
          content: {}
        '400':
          description: Invalid ID supplied
          content: {}
        '404':
          description: Code not found
          content: {}
        '405':
          description: Validation exception
          content: {}
  '/codedelete/{id}':
    delete:
      tags:
        - Codes
      summary: Delete a code
      operationId: deleteCode
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '202':
          description: Code has been removed
          content: {}
        '400':
          description: Invalid ID supplied
          content: {}
        '404':
          description: Code not found
          content: {}
  /lottery:
    get:
      tags:
        - Lottery
      summary: List all Lotteries
      operationId: listAllLotteries
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Lottery'
        '400':
          description: Bed request
          content: {}
    post:
      tags:
        - Lottery
      summary: Add a new lottery
      operationId: addLottery
      requestBody:
        description: Lottery object that needs to be added
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Lottery'
        required: true
      responses:
        '201':
          description: successful operation
          content: {}
        '405':
          description: Invalid input
          content: {}
  '/lottery/{id}':
    get:
      tags:
        - Lottery
      summary: Find lottery by id
      operationId: getLotteryById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '202':
          description: Code has been removed
          content: {}
        '400':
          description: Invalid ID supplied
          content: {}
        '404':
          description: Lottery not found
          content: {}
    put:
      tags:
        - Lottery
      summary: Update an existing lottery
      operationId: updateLottery
      parameters:
        - name: id
          in: path
          description: Lottery Id that need to be updated
          required: true
          schema:
            type: integer
      requestBody:
        description: Updated lottery object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Lottery'
        required: false
      responses:
        '204':
          description: Lottery has been updated
          content: {}
        '400':
          description: Invalid ID supplied
          content: {}
        '404':
          description: Lottery not found
          content: {}
        '405':
          description: Validation exception
          content: {}
    delete:
      tags:
        - Lottery
      summary: Delete a lottery
      operationId: deleteLottery
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '202':
          description: Lottery has been removed
          content: {}
        '400':
          description: Invalid ID supplied
          content: {}
        '404':
          description: Lottery not found
          content: {}
  /prize:
    get:
      tags:
        - Prize
      summary: List all Prize
      operationId: listAllPrizes
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Prize'
        '400':
          description: Bed request
          content: {}
    post:
      tags:
        - Prize
      summary: Add a new prize
      operationId: addPrize
      requestBody:
        description: Prize object that needs to be added
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Prize'
        required: true
      responses:
        '201':
          description: successful operation
          content: {}
        '405':
          description: Invalid input
          content: {}
  '/prize/{id}':
    get:
      tags:
        - Prize
      summary: Find prize by id
      operationId: getPrizeById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '202':
          description: Prize has been removed
          content: {}
        '400':
          description: Invalid ID supplied
          content: {}
        '404':
          description: Pet not found
          content: {}
    put:
      tags:
        - Prize
      summary: Update an existing Prize
      operationId: updatePrize
      parameters:
        - name: id
          in: path
          description: Prize Id that need to be updated
          required: true
          schema:
            type: integer
      requestBody:
        description: Updated prize object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Prize'
        required: false
      responses:
        '204':
          description: Prize has been updated
          content: {}
        '400':
          description: Invalid ID supplied
          content: {}
        '404':
          description: Prize not found
          content: {}
        '405':
          description: Validation exception
          content: {}
    delete:
      tags:
        - Prize
      summary: Delete a Prize
      operationId: deletev
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '202':
          description: Prize has been removed
          content: {}
        '400':
          description: Invalid ID supplied
          content: {}
        '404':
          description: Prize not found
          content: {}
  /users:
    get:
      tags:
        - Users
      summary: List all Users
      operationId: listAllUsers
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Users'
        '400':
          description: Bed request
          content: {}
    post:
      tags:
        - Users
      summary: Add a new user
      operationId: addUser
      requestBody:
        description: User object that needs to be added
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Users'
        required: true
      responses:
        '201':
          description: successful operation
          content: {}
        '405':
          description: Invalid input
          content: {}
  '/users/{email}':
    get:
      tags:
        - Users
      summary: Find user by email
      operationId: getUserByEmail
      parameters:
        - name: email
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '202':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Users'
        '400':
          description: Invalid ID supplied
          content: {}
        '404':
          description: User not found
          content: {}
  '/draw/{id}':
    get:
      tags:
        - Draw
      summary: Find Draw by id
      operationId: getDrawById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '202':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Draw'
        '400':
          description: Invalid ID supplied
          content: {}
        '404':
          description: Draw not found
          content: {}
    post:
      tags:
        - Draw
      summary: Add a new draw
      operationId: addDraw
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '201':
          description: successful operation
          content: {}
        '405':
          description: Invalid input
          content: {}
  /draw:
    get:
      tags:
        - Draw
      summary: List all Draw
      operationId: listAllDraw
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Draw'
        '400':
          description: Bed request
          content: {}
components:
  schemas:
    Codes:
      required:
        - code
        - lotteryId
      type: object
      properties:
        id:
          type: integer
          format: int64
        code:
          type: string
        userId:
          type: integer
          format: int64
        lotteryId:
          type: integer
          format: int32
        status:
          type: string
          default: free
          enum:
            - free
            - taken
            - rewarded
        rewardedAt:
          type: string
          format: date
      xml:
        name: Codes
    Draw:
      type: object
      properties:
        id:
          type: integer
          format: int64
        codeId:
          type: integer
          format: int64
        prizeId:
          type: integer
          format: int64
      xml:
        name: Draw
    Lottery:
      required:
        - fondPrize
        - grandPrize
        - name
        - owner
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        fondPrize:
          type: string
        grandPrize:
          type: string
        owner:
          type: string
        startDate:
          type: string
          format: date
        endDate:
          type: string
          format: date
      xml:
        name: Lottery
    Users:
      required:
        - email
        - lastCode
        - name
        - phone
      type: object
      properties:
        id:
          type: integer
          format: int64
        lastCode:
          type: string
        name:
          type: string
        email:
          type: string
        phone:
          type: string
      xml:
        name: Users
    Prize:
      required:
        - name
        - numberOfPrizes
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        status:
          type: string
          enum:
            - perDay
            - perWeek
            - final
        numberOfPrizes:
          type: integer
      xml:
        name: Prize
